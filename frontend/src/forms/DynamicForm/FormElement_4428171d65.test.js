// Test generated by RoostGPT for test React_Unit_Test2 using AI Type Open AI and AI Model gpt-4


import { render, fireEvent } from "@testing-library/react";
import FormElement from "./index";
import { Form } from "antd";

describe("FormElement component", () => {
  let container;
  const mockSubmit = jest.fn();
  
  beforeEach(() => {
    container = render(
      <Form onFinish={mockSubmit}>
        <FormElement
          fieldType="input"
          label="Test Label"
          name="testName"
          required
          message="Test message"
        />
        <FormElement
          fieldType="select"
          label="Test Select"
          name="testSelect"
          selectOptions={[{ key: "1", value: "Option 1" }, { key: "2", value: "Option 2" }]}
        />
        <FormElement
          fieldType="date"
          label="Test Date"
          name="testDate"
        />
        <button type="submit">Submit</button>
      </Form>
    ).container;
  });

  test("should render input field with correct label and name", () => {
    const input = container.querySelector('input[name="testName"]');
    const label = container.querySelector('label[for="testName"]');
    expect(input).not.toBeNull();
    expect(label).not.toBeNull();
    expect(label.textContent).toBe("Test Label");
  });

  test("should render select field with correct options", () => {
    const select = container.querySelector('select[name="testSelect"]');
    expect(select).not.toBeNull();
    const options = container.querySelectorAll('select[name="testSelect"] option');
    expect(options.length).toBe(2);
    expect(options[0].textContent).toBe("Option 1");
    expect(options[1].textContent).toBe("Option 2");
  });

  test("should render date field", () => {
    const dateInput = container.querySelector('input[name="testDate"]');
    expect(dateInput).not.toBeNull();
  });

  test("should submit form with correct values", async () => {
    const input = container.querySelector('input[name="testName"]');
    const select = container.querySelector('select[name="testSelect"]');
    const dateInput = container.querySelector('input[name="testDate"]');
    const submitButton = container.querySelector('button[type="submit"]');

    fireEvent.change(input, { target: { value: "Test input" } });
    fireEvent.change(select, { target: { value: "1" } });
    fireEvent.change(dateInput, { target: { value: "01/01/2022" } });
    fireEvent.click(submitButton);

    expect(mockSubmit).toBeCalledWith({
      testName: "Test input",
      testSelect: "1",
      testDate: "01/01/2022",
    });
  });
});
